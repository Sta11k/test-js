{"version":3,"sources":["components/Timer/Timer.jsx","App.jsx","index.jsx"],"names":["Timer","useState","seconds","setSeconds","status","setStatus","count","setCount","console","log","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","next","complete","count$","Observable","timer","debounceTime","className","Date","toISOString","slice","name","onClick","e","preventDefault","id","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIe,SAASA,IACtB,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,QAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACAC,QAAQC,IAAI,SAAUL,GAEtBM,qBAAU,WACR,IAAMC,EAAe,IAAIC,IAQzB,OAPAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACM,UAAXZ,GACFD,GAAW,kBAAMD,EAAU,UAG1B,WACLS,EAAaM,OACbN,EAAaO,cAEd,CAAChB,EAASE,IAEbM,qBAAU,WACR,IAAMS,EAAS,IAAIC,IACnBC,YAAM,KACHP,KAAKC,YAAUI,IACfH,WAAU,WAMT,OALc,IAAVV,EACFD,EAAU,QAEVE,EAAS,GAEJ,WACLe,YAAa,KACbH,EAAOF,OAEPE,EAAOD,SAASb,EAAU,eAG/B,CAACC,EAAOF,IAsBX,OACE,sBAAKmB,UAAU,YAAf,UACE,qCAAQ,IAAIC,KAAKtB,GAASuB,cAAcC,MAAM,GAAI,OAClD,qBAAIH,UAAU,SAAd,UACE,oBAAIA,UAAU,eAAd,SACc,SAAXnB,EACC,wBAAQuB,KAAK,QAAQC,QA1BP,SAAAC,GACtBA,EAAEC,iBAEFzB,EAAU,UAuBF,2BAIA,wBAAQsB,KAAK,OAAOC,QAxBN,SAAAC,GACtBxB,EAAU,QACVF,EAAW,IAsBH,4BAMJ,oBAAIoB,UAAU,eAAd,SACE,wBAAQI,KAAK,OAAOI,GAAG,UAAUH,QArBjB,SAAAC,GACtBtB,GAAS,kBAAMD,EAAQ,MAoBjB,4BAKF,oBAAIiB,UAAU,eAAd,SACE,wBAAQI,KAAK,QAAQC,QAhCJ,SAAAC,GACvB1B,EAAW,GACXE,EAAU,UA8BJ,mCCjFK,SAAS2B,IACtB,OACE,qBAAKT,UAAU,MAAf,SACE,cAACvB,EAAD,MCDNiC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACH,EAAD,MAEFI,SAASC,eAAe,W","file":"static/js/main.2d7eafe9.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { interval, Observable, Subject, timer } from 'rxjs';\nimport { debounceTime, takeUntil } from 'rxjs/operators';\n\nexport default function Timer() {\n  const [seconds, setSeconds] = useState(0);\n  const [status, setStatus] = useState('stop');\n  const [count, setCount] = useState(0);\n  console.log('STATUS', status);\n  // console.log('count', count);\n  useEffect(() => {\n    const unsubscribe$ = new Subject();\n    interval(1000)\n      .pipe(takeUntil(unsubscribe$))\n      .subscribe(() => {\n        if (status === 'start') {\n          setSeconds(() => seconds + 1000);\n        }\n      });\n    return () => {\n      unsubscribe$.next();\n      unsubscribe$.complete();\n    };\n  }, [seconds, status]);\n\n  useEffect(() => {\n    const count$ = new Observable();\n    timer(300)\n      .pipe(takeUntil(count$))\n      .subscribe(() => {\n        if (count === 2) {\n          setStatus('wait');\n        } else {\n          setCount(0);\n        }\n        return () => {\n          debounceTime(300);\n          count$.next();\n\n          count$.complete(setStatus('stop'));\n        };\n      });\n  }, [count, status]);\n\n  const HendlStartTimer = e => {\n    e.preventDefault();\n\n    setStatus('start');\n  };\n\n  const HendleStopTimer = e => {\n    setStatus('stop');\n    setSeconds(0);\n  };\n\n  const HendleResetTimer = e => {\n    setSeconds(0);\n    setStatus('start');\n  };\n\n  const HendleWaitTimer = e => {\n    setCount(() => count + 1);\n  };\n\n  return (\n    <div className=\"container\">\n      <span> {new Date(seconds).toISOString().slice(11, 19)}</span>\n      <ul className=\"button\">\n        <li className=\"button__item\">\n          {status === 'stop' ? (\n            <button name=\"start\" onClick={HendlStartTimer}>\n              «Start»\n            </button>\n          ) : (\n            <button name=\"stop\" onClick={HendleStopTimer}>\n              «Stop»\n            </button>\n          )}\n          {/* <button name=\"stop\" value={name} onClick={HendleStopTimer}> */}\n        </li>\n        <li className=\"button__item\">\n          <button name=\"wait\" id=\"timer-1\" onClick={HendleWaitTimer}>\n            {/* <button name=\"wait\" value={name} onClick={HendleWaitTimer}> */}\n            «Wait»\n          </button>\n        </li>\n        <li className=\"button__item\">\n          <button name=\"reset\" onClick={HendleResetTimer}>\n            {/* <button name=\"reset\" value={name} onClick={HendleResetTimer}> */}\n            «Reset»\n          </button>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import './styles.css';\r\n// import { useState, useEffect } from 'react';\r\n// import toast, { Toaster } from 'react-hot-toast';\r\n\r\nimport Timer from './components/Timer/Timer';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Timer />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n// import '../src/styles.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}